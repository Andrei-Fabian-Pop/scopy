name: Generate documentation

on:
  push:
    branches:
      - main
    tags:
      - v*.*.*
  pull_request:
    types:
      - closed
      - opened

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build-doc:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: "3.x"


    - name: Differentiate main from tag
      run: |
        if [ "${{ github.ref_name }}" != "main" ] ; then
          echo "new_tag=1" >> "$GITHUB_ENV"
        else
          echo "new_tag=0" >> "$GITHUB_ENV"
        fi

    - name: Install pip packages
      working-directory: docs
      run: |
        pip install pip --upgrade
        pip install -r requirements.txt

    - name: Generate test report files
      working-directory: docs
      # github.event.pull_request.merged == true is not necessary, it should generate this even if it will not be deployed
      if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'testing_') && github.ref == 'refs/heads/main'
      run: |
        # Also add check that the branch is going to main
        echo "Executing test_report_generator.py"
        echo "${{ github.event.pull_request.head.ref }}"
        echo "${{ github.ref }}"
        echo "${GITHUB_HEAD_REF}"
        echo "github.event_name: ${{ github.event_name }}"
        # Add to GITHUB_ENV that the test report was generated and the folder name: testing_{name}, only the name, without the prefix
        TEST_REPORT_FOLDER_NAME=$(echo "${{ github.event.pull_request.head.ref }}" | sed "s/^testing_//") # Remove the prefix
        echo "test_report_folder_name=${TEST_REPORT_FOLDER_NAME}"
        echo "test_report_folder_name=${TEST_REPORT_FOLDER_NAME}" >> "$GITHUB_ENV"
        python3 test_report_generator.py ../testing_results/ tests/test_report/ "${{ github.sha }}"

    - name: Build doc
      working-directory: docs
      run: |
        python3 extract_macros.py ../ user_guide/preferences_table.rst
        export ADOC_DOC_VERSION=${{ github.ref_name }}
        make html SPHINXOPTS='-W --keep-going'

    - name: Store the generated doc
      uses: actions/upload-artifact@v4
      with:
        name: html
        path: docs/_build/html

  deploy-doc:
    runs-on: ubuntu-latest
    needs: build-doc
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
    - run: |
        git config --global user.name "Andrei-Fabian-Pop"
        git config --global user.email "andrei.fabian.pop@gmail.com"

    - name: Create gh-pages branch
      run: |
        git status
        git reset --hard ;
        git clean -fdx ;
        git ls-remote --exit-code --heads origin refs/heads/gh-pages &&
        (
          git fetch origin gh-pages ;
          git checkout -b gh-pages origin/gh-pages ;
          DOC_BUILDS=$(find . -mindepth 2 -name objects.inv -exec sh -c 'dirname {}' ';') ;
          git rm -r . --quiet || true ;
          printf "Detected doc builds: $DOC_BUILDS" ;
          if ! [ -z "$DOC_BUILDS" ]; then
            git checkout @ -- $DOC_BUILDS ;
          fi ;
          if [[ "$new_tag" == "1" ]]; then
            git rm -r ${{ github.ref_name }} --quiet || true ;
          fi ;
          printf "$test_report_folder_name" ;
          if [[ "$test_report_folder_name" != "" ]]; then
            printf "Should create this folder for testing-docs: ${test_report_folder_name}-testing"
          fi ;
        ) || (
          git checkout --orphan gh-pages ;
          git reset --hard ;
          git commit -m "initial commit" --allow-empty
        )

    - uses: actions/download-artifact@v4
      if: ${{ env.new_tag == '0' }}
      with:
        name: html

    - uses: actions/download-artifact@v4
      if: ${{ env.new_tag == '1' }}
      with:
        name: html
        path: ${{ github.ref_name }}

    - name: Generate aux files
      run: |
        touch .nojekyll ;
        find . -name objects.inv -exec sh -c 'dirname {}' ';' |
        cut -c 3- | sort -r |
        jq --raw-input . |
        jq --slurp . > tags.json

    - name: Commit and push to gh-pages
      run: |
        git add . >> /dev/null
        git commit -m "deploy: ${GITHUB_SHA}" --allow-empty
        git push origin gh-pages:gh-pages
